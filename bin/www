#!/usr/bin/env node

/* Module dependencies. */

const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');

/* Get port from environment and store in Express. */

const port = normalizePort(process.env.PORT || '8005');
app.set('port', port);

/* Create HTTP server. */

const server = http.createServer(app);

/* Attach socket.io to server. */

let connections = 0;
const io = require('socket.io')(server);
io.on('connection', (socket) => {
  connections++;
  console.log(`socket connected!\ntotal: ${connections}`);
  io.emit('newConnection', connections);
  socket.on('drawEvent', (data) => {
    socket.broadcast.emit('draw', data);
  });
  socket.on('clearCanvas', () => {
    console.log('clear canvas!');
    io.emit('clearCanvas');
  });
  socket.on('chat message', (msg) => {
    console.log('chat message: ', msg);
    io.emit('chat message', msg);
  });
  socket.on('disconnect', () => {
    connections--;
    io.emit('newConnection', connections);
    console.log(`socket disconnected!\ntotal: ${connections}`);
  });
  socket.on('image:fetch', ({ id }) => {
    console.log(`image:fetch ${id}`);
    io.emit('image:fetch', ({ id }));
  });
  socket.on('image:update', ({ image }) => {
    io.emit('image:update', { image });
  });
});

/* Listen on provided port, on all network interfaces. */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event. */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server "listening" event. */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
